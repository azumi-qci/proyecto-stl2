export const lrTable = {
  0: {
    type: 5,
    $: -2,
    program: 1,
    definitions: 2,
    definition: 3,
    variableDef: 4,
    functionDef: 6,
  },
  1: {
    $: 0,
  },
  2: {
    $: -1,
  },
  3: {
    type: 5,
    $: -2,
    definitions: 7,
    definition: 3,
    variableDef: 4,
    functionDef: 6,
  },
  4: {
    type: -4,
    $: -4,
  },
  5: {
    identifier: 8,
  },
  6: {
    type: -5,
    $: -5,
  },
  7: {
    $: -3,
  },
  8: {
    ';': -7,
    comma: 10,
    '(': 11,
    variableList: 9,
  },
  9: {
    ';': 12,
  },
  10: {
    identifier: 13,
  },
  11: {
    type: 15,
    ')': -10,
    parameters: 14,
  },
  12: {
    identifier: -6,
    type: -6,
    '}': -6,
    if: -6,
    while: -6,
    return: -6,
    $: -6,
  },
  13: {
    ';': -7,
    comma: 10,
    variableList: 16,
  },
  14: {
    ')': 17,
  },
  15: {
    identifier: 18,
  },
  16: {
    ';': -8,
  },
  17: {
    '{': 20,
    functionBlock: 19,
  },
  18: {
    comma: 22,
    ')': -12,
    parameterList: 21,
  },
  19: {
    type: -9,
    $: -9,
  },
  20: {
    identifier: 27,
    type: 5,
    '}': -15,
    if: 28,
    while: 29,
    return: 30,
    variableDef: 25,
    localDefinitions: 23,
    localDefinition: 24,
    sentence: 26,
    functionCall: 31,
  },
  21: {
    ')': -11,
  },
  22: {
    type: 32,
  },
  23: {
    '}': 33,
  },
  24: {
    identifier: 27,
    type: 5,
    '}': -15,
    if: 28,
    while: 29,
    return: 30,
    variableDef: 25,
    localDefinitions: 34,
    localDefinition: 24,
    sentence: 26,
    functionCall: 31,
  },
  25: {
    identifier: -17,
    type: -17,
    '}': -17,
    if: -17,
    while: -17,
    return: -17,
  },
  26: {
    identifier: -18,
    type: -18,
    '}': -18,
    if: -18,
    while: -18,
    return: -18,
  },
  27: {
    '(': 36,
    '=': 35,
  },
  28: {
    '(': 37,
  },
  29: {
    '(': 38,
  },
  30: {
    identifier: 46,
    integer: 47,
    real: 48,
    string: 49,
    additionOperator: 42,
    notOp: 43,
    ';': -29,
    '(': 41,
    returnValue: 39,
    end: 44,
    functionCall: 45,
    expression: 40,
  },
  31: {
    ';': 50,
  },
  32: {
    identifier: 51,
  },
  33: {
    type: -14,
    $: -14,
  },
  34: {
    '}': -16,
  },
  35: {
    identifier: 46,
    integer: 47,
    real: 48,
    string: 49,
    additionOperator: 42,
    notOp: 43,
    '(': 41,
    end: 44,
    functionCall: 45,
    expression: 52,
  },
  36: {
    identifier: 46,
    integer: 47,
    real: 48,
    string: 49,
    additionOperator: 42,
    notOp: 43,
    '(': 41,
    ')': -31,
    arguments: 53,
    end: 44,
    functionCall: 45,
    expression: 54,
  },
  37: {
    identifier: 46,
    integer: 47,
    real: 48,
    string: 49,
    additionOperator: 42,
    notOp: 43,
    '(': 41,
    end: 44,
    functionCall: 45,
    expression: 55,
  },
  38: {
    identifier: 46,
    integer: 47,
    real: 48,
    string: 49,
    additionOperator: 42,
    notOp: 43,
    '(': 41,
    end: 44,
    functionCall: 45,
    expression: 56,
  },
  39: {
    ';': 57,
  },
  40: {
    additionOperator: 59,
    multiplicationOperator: 58,
    relationOperator: 60,
    orOperator: 63,
    andOperator: 62,
    equalsOperator: 61,
    ';': -30,
  },
  41: {
    identifier: 46,
    integer: 47,
    real: 48,
    string: 49,
    additionOperator: 42,
    notOp: 43,
    '(': 41,
    end: 44,
    functionCall: 45,
    expression: 64,
  },
  42: {
    identifier: 46,
    integer: 47,
    real: 48,
    string: 49,
    additionOperator: 42,
    notOp: 43,
    '(': 41,
    end: 44,
    functionCall: 45,
    expression: 65,
  },
  43: {
    identifier: 46,
    integer: 47,
    real: 48,
    string: 49,
    additionOperator: 42,
    notOp: 43,
    '(': 41,
    end: 44,
    functionCall: 45,
    expression: 66,
  },
  44: {
    additionOperator: -52,
    multiplicationOperator: -52,
    relationOperator: -52,
    orOperator: -52,
    andOperator: -52,
    equalsOperator: -52,
    ';': -52,
    comma: -52,
    ')': -52,
  },
  45: {
    additionOperator: -35,
    multiplicationOperator: -35,
    relationOperator: -35,
    orOperator: -35,
    andOperator: -35,
    equalsOperator: -35,
    ';': -35,
    comma: -35,
    ')': -35,
  },
  46: {
    additionOperator: -36,
    multiplicationOperator: -36,
    relationOperator: -36,
    orOperator: -36,
    andOperator: -36,
    equalsOperator: -36,
    ';': -36,
    comma: -36,
    '(': 36,
    ')': -36,
  },
  47: {
    additionOperator: -37,
    multiplicationOperator: -37,
    relationOperator: -37,
    orOperator: -37,
    andOperator: -37,
    equalsOperator: -37,
    ';': -37,
    comma: -37,
    ')': -37,
  },
  48: {
    additionOperator: -38,
    multiplicationOperator: -38,
    relationOperator: -38,
    orOperator: -38,
    andOperator: -38,
    equalsOperator: -38,
    ';': -38,
    comma: -38,
    ')': -38,
  },
  49: {
    additionOperator: -39,
    multiplicationOperator: -39,
    relationOperator: -39,
    orOperator: -39,
    andOperator: -39,
    equalsOperator: -39,
    ';': -39,
    comma: -39,
    ')': -39,
  },
  50: {
    identifier: -25,
    type: -25,
    '}': -25,
    if: -25,
    while: -25,
    return: -25,
    else: -25,
  },
  51: {
    comma: 22,
    ')': -12,
    parameterList: 67,
  },
  52: {
    additionOperator: 59,
    multiplicationOperator: 58,
    relationOperator: 60,
    orOperator: 63,
    andOperator: 62,
    equalsOperator: 61,
    ';': 68,
  },
  53: {
    ')': 69,
  },
  54: {
    additionOperator: 59,
    multiplicationOperator: 58,
    relationOperator: 60,
    orOperator: 63,
    andOperator: 62,
    equalsOperator: 61,
    comma: 71,
    ')': -33,
    argumentList: 70,
  },
  55: {
    additionOperator: 59,
    multiplicationOperator: 58,
    relationOperator: 60,
    orOperator: 63,
    andOperator: 62,
    equalsOperator: 61,
    ')': 72,
  },
  56: {
    additionOperator: 59,
    multiplicationOperator: 58,
    relationOperator: 60,
    orOperator: 63,
    andOperator: 62,
    equalsOperator: 61,
    ')': 73,
  },
  57: {
    identifier: -24,
    type: -24,
    '}': -24,
    if: -24,
    while: -24,
    return: -24,
    else: -24,
  },
  58: {
    identifier: 46,
    integer: 47,
    real: 48,
    string: 49,
    additionOperator: 42,
    notOp: 43,
    '(': 41,
    end: 44,
    functionCall: 45,
    expression: 74,
  },
  59: {
    identifier: 46,
    integer: 47,
    real: 48,
    string: 49,
    additionOperator: 42,
    notOp: 43,
    '(': 41,
    end: 44,
    functionCall: 45,
    expression: 75,
  },
  60: {
    identifier: 46,
    integer: 47,
    real: 48,
    string: 49,
    additionOperator: 42,
    notOp: 43,
    '(': 41,
    end: 44,
    functionCall: 45,
    expression: 76,
  },
  61: {
    identifier: 46,
    integer: 47,
    real: 48,
    string: 49,
    additionOperator: 42,
    notOp: 43,
    '(': 41,
    end: 44,
    functionCall: 45,
    expression: 77,
  },
  62: {
    identifier: 46,
    integer: 47,
    real: 48,
    string: 49,
    additionOperator: 42,
    notOp: 43,
    '(': 41,
    end: 44,
    functionCall: 45,
    expression: 78,
  },
  63: {
    identifier: 46,
    integer: 47,
    real: 48,
    string: 49,
    additionOperator: 42,
    notOp: 43,
    '(': 41,
    end: 44,
    functionCall: 45,
    expression: 79,
  },
  64: {
    additionOperator: 59,
    multiplicationOperator: 58,
    relationOperator: 60,
    orOperator: 63,
    andOperator: 62,
    equalsOperator: 61,
    ')': 80,
  },
  65: {
    additionOperator: -44,
    multiplicationOperator: -44,
    relationOperator: -44,
    orOperator: -44,
    andOperator: -44,
    equalsOperator: -44,
    ';': -44,
    comma: -44,
    ')': -44,
  },
  66: {
    additionOperator: -45,
    multiplicationOperator: -45,
    relationOperator: -45,
    orOperator: -45,
    andOperator: -45,
    equalsOperator: -45,
    ';': -45,
    comma: -45,
    ')': -45,
  },
  67: {
    ')': -13,
  },
  68: {
    identifier: -21,
    type: -21,
    '}': -21,
    if: -21,
    while: -21,
    return: -21,
    else: -21,
  },
  69: {
    additionOperator: -40,
    multiplicationOperator: -40,
    relationOperator: -40,
    orOperator: -40,
    andOperator: -40,
    equalsOperator: -40,
    ';': -40,
    comma: -40,
    ')': -40,
  },
  70: {
    ')': -32,
  },
  71: {
    identifier: 46,
    integer: 47,
    real: 48,
    string: 49,
    additionOperator: 42,
    notOp: 43,
    '(': 41,
    end: 44,
    functionCall: 45,
    expression: 81,
  },
  72: {
    identifier: 27,
    '{': 85,
    if: 28,
    while: 29,
    return: 30,
    sentence: 83,
    block: 84,
    functionCall: 31,
    sentenceBloque: 82,
  },
  73: {
    '{': 85,
    block: 86,
  },
  74: {
    additionOperator: -46,
    multiplicationOperator: -46,
    relationOperator: -46,
    orOperator: -46,
    andOperator: -46,
    equalsOperator: -46,
    ';': -46,
    comma: -46,
    ')': -46,
  },
  75: {
    additionOperator: -47,
    multiplicationOperator: 58,
    relationOperator: -47,
    orOperator: -47,
    andOperator: -47,
    equalsOperator: -47,
    ';': -47,
    comma: -47,
    ')': -47,
  },
  76: {
    additionOperator: 59,
    multiplicationOperator: 58,
    relationOperator: -48,
    orOperator: -48,
    andOperator: -48,
    equalsOperator: -48,
    ';': -48,
    comma: -48,
    ')': -48,
  },
  77: {
    additionOperator: 59,
    multiplicationOperator: 58,
    relationOperator: 60,
    orOperator: -49,
    andOperator: -49,
    equalsOperator: -49,
    ';': -49,
    comma: -49,
    ')': -49,
  },
  78: {
    additionOperator: 59,
    multiplicationOperator: 58,
    relationOperator: 60,
    orOperator: -50,
    andOperator: -50,
    equalsOperator: 61,
    ';': -50,
    comma: -50,
    ')': -50,
  },
  79: {
    additionOperator: 59,
    multiplicationOperator: 58,
    relationOperator: 60,
    orOperator: -51,
    andOperator: 62,
    equalsOperator: 61,
    ';': -51,
    comma: -51,
    ')': -51,
  },
  80: {
    additionOperator: -43,
    multiplicationOperator: -43,
    relationOperator: -43,
    orOperator: -43,
    andOperator: -43,
    equalsOperator: -43,
    ';': -43,
    comma: -43,
    ')': -43,
  },
  81: {
    additionOperator: 59,
    multiplicationOperator: 58,
    relationOperator: 60,
    orOperator: 63,
    andOperator: 62,
    equalsOperator: 61,
    comma: 71,
    ')': -33,
    argumentList: 87,
  },
  82: {
    identifier: -26,
    type: -26,
    '}': -26,
    if: -26,
    while: -26,
    return: -26,
    else: 89,
    other: 88,
  },
  83: {
    identifier: -41,
    type: -41,
    '}': -41,
    if: -41,
    while: -41,
    return: -41,
    else: -41,
  },
  84: {
    identifier: -42,
    type: -42,
    '}': -42,
    if: -42,
    while: -42,
    return: -42,
    else: -42,
  },
  85: {
    identifier: 27,
    '}': -19,
    if: 28,
    while: 29,
    return: 30,
    sentences: 90,
    sentence: 91,
    functionCall: 31,
  },
  86: {
    identifier: -23,
    type: -23,
    '}': -23,
    if: -23,
    while: -23,
    return: -23,
    else: -23,
  },
  87: {
    ')': -34,
  },
  88: {
    identifier: -22,
    type: -22,
    '}': -22,
    if: -22,
    while: -22,
    return: -22,
    else: -22,
  },
  89: {
    identifier: 27,
    '{': 85,
    if: 28,
    while: 29,
    return: 30,
    sentence: 83,
    block: 84,
    functionCall: 31,
    sentenceBloque: 92,
  },
  90: {
    '}': 93,
  },
  91: {
    identifier: 27,
    '}': -19,
    if: 28,
    while: 29,
    return: 30,
    sentences: 94,
    sentence: 91,
    functionCall: 31,
  },
  92: {
    identifier: -27,
    type: -27,
    '}': -27,
    if: -27,
    while: -27,
    return: -27,
  },
  93: {
    identifier: -28,
    type: -28,
    '}': -28,
    if: -28,
    while: -28,
    return: -28,
    else: -28,
  },
  94: {
    '}': -20,
  },
};
